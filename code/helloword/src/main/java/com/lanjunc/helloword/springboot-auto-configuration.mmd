Mind Map generated by NB MindMap plugin   
> __version__=`1.1`,showJumps=`true`
---

# 自动配置原理分析
> collapsed=`true`


## @SpringBootApplication

### @SpringBootConfiguration

#### @Configuration

### @EnableAutoConfiguration：自动导入包

#### @AutoConfigurationPackage

##### @Import\(AutoConfigurationPackages\.Registrar\.class\)：自动注册包

#### @Import\(AutoConfigurationImportSelector\.class\)：自动导入包的核心

##### AutoConfigurationImportSelector：选择了什么东西

###### getAutoConfigurationEntry获得自动配置实体方法

###### getCandidateConfigurations：获取候选的配置

###### public static List\<String\> loadFactoryNames\(Class\<?\> factoryType, @Nullable ClassLoader classLoader\) \{<br/>String factoryTypeName = factoryType\.getName\(\);<br/>return loadSpringFactories\(classLoader\)\.getOrDefault\(factoryTypeName, Collections\.emptyList\(\)\);<br/>\}// 获取所有的加载配置

###### loadSpringFactories

####### 项目资源：classLoader\.getResources\(FACTORIES\_RESOURCE\_LOCATION\)

######## "META\-INF/spring\.factories";从这里获取配置

######### spring\-boot\-autoconfigure\-2\.3\.5\.RELEASE\.jar

########## META\-INF

########### spring\.factories所有的自动配置类都在这里了

############ 这么多自动配置为什么有的没有生效，需要导入starter才能有效！

############# 核心注解@ConditionalOnXXX：如果这里面的条件都满足才会生效。

####### 系统资源：ClassLoader\.getSystemResources\(FACTORIES\_RESOURCE\_LOCATION\)\);

####### 从这些资源中遍历了所有的nextElement（自动配置），遍历完之后，封装成Properties供我们使用。

### @ComponentScan：扫描当前主启动类同级的包
> align=`left`


## 结论：springboot所有的自动配置都在启动类中被扫描并加载，<br/>spring\.factories所有自动配置类都在这里。但是不一定生效，<br/>要判断条件是否成立，只要导入了对应的start就有了对应的启动器了，<br/>有了启动器我们的自动装配就会生效，然后就配置成功了！
> leftSide=`true`

